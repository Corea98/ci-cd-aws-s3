name: Frontend S3 CI/CD

on:
  push:
    paths:
      - "frontend/**"
      - ".github/workflows/deploy-aws-s3.yml"

# Required permissions for deploy to AWS S3 bucket
permissions:
  id-token: write
  contents: read

jobs:
  sonar-cloud:
    defaults:
      run:
        working-directory: frontend
    runs-on: ubuntu-latest

    steps:
      # Checkout repository
      - uses: actions/checkout@v2

      # SonarCloud
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        with:
          projectBaseDir: frontend
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  test:
    defaults:
      run:
        working-directory: frontend
    runs-on: ubuntu-latest

    steps:
      # Checkout repository
      - uses: actions/checkout@v2
 
      # Set node v14
      - name: Setup node
        if: success()
        uses: actions/setup-node@v1
        with:
          node-version: 14

      # Restore or cache node modules
      - name: Cache node modules
        id: cache-nodemodules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      # Install dependencies if cache doesn't exist
      - name: Install dependencies
        if: success() && steps.cache-nodemodules.outputs.cache-hit != 'true'
        run: npm ci

      # Run lint and angular tests
      - name: Test
        if: success()
        run: |
          npm run lint
          npm run test:ci

      # Output environment
      - name: Some check on branch
        id: branch_check
        run: |
          echo "Running on branch ${{ github.ref }}"
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "::set-output name=env_name::Production"
          elif [ "${{ github.ref }}" = "refs/heads/staging" ]; then
            echo "::set-output name=env_name::Staging"
          elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            echo "::set-output name=env_name::Develop"
          else
             echo "::set-output name=env_name::Features"
          fi         
          
      # Print environment to check it's correct
      - name: Print environment
        run: |
          echo "Environment: ${{ steps.branch_check.outputs.env_name }}"
        
    outputs:
      env_name: ${{ steps.branch_check.outputs.env_name }}

  deploy:
    needs: [test, sonar-cloud] 
    if: needs.test.outputs.env_name != 'Features'
    defaults:
      run:
        working-directory: frontend
    environment: ${{ needs.test.outputs.env_name }}
    runs-on: ubuntu-latest

    steps:
      # Checkout repository
      - uses: actions/checkout@v2

      # Set node v14
      - name: Setup node
        if: success()
        uses: actions/setup-node@v1
        with:
          node-version: 14   

      # Restore node modules
      - name: Cache node modules
        id: cache-nodemodules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      # OUTPUT ENVIRONMENT FOR BUILD
      - name: Some check on branch
        id: build_env
        run: |
          if [ "${{ needs.test.outputs.env_name }}" = "Production" ]; then
            echo "::set-output name=build_name::prd"
          elif [ "${{ needs.test.outputs.env_name }}" = "Staging" ]; then
            echo "::set-output name=build_name::stg"
          elif [ "${{ needs.test.outputs.env_name }}" = "Develop" ]; then
            echo "::set-output name=build_name::dev"
          else
             echo "::set-output name=build_name::unk"
          fi      
            
      # Build project only if branch is main, staging or develop
      - name: Build
        if: success()
        run: |
          npm run build:${{ steps.build_env.outputs.build_name }}

      # Setup AWS credentials when push on branches main, staging or develop
      - name: Setup AWS credentials
        if: success()
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID  }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # Deploy to AWS S3 bucket when push on branches main, staging or develop
      - name: Deploy
        if: success()
        run: aws s3 sync ${{ secrets.FRONTEND_BUILD_PATH }} s3://${{ secrets.AWS_S3_NAME }} --delete
